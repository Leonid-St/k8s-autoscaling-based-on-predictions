# 0. Установка CRD для KEDA
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: scaledobjects.keda.sh
spec:
  group: keda.sh
  names:
    kind: ScaledObject
    listKind: ScaledObjectList
    plural: scaledobjects
    singular: scaledobject
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        x-kubernetes-preserve-unknown-fields: true
    subresources:
      status: {}
---
# 1. Создание неймспейсов
apiVersion: v1
kind: Namespace
metadata:
  name: keda-test

apiVersion: v1
kind: Namespace
metadata:
  name: keda-system
---
# 2. Установка KEDA Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keda-operator
  namespace: keda-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: keda-operator
rules:
- apiGroups: [""]
  resources: ["events", "configmaps", "secrets", "pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["*"]
  resources: ["*/scale", "deployments", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["keda.sh"]
  resources: ["scaledobjects", "scaledjobs"]
  verbs: ["*"]
- apiGroups: ["external.metrics.k8s.io"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: keda-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: keda-operator
subjects:
- kind: ServiceAccount
  name: keda-operator
  namespace: keda-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keda-operator
  namespace: keda-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keda-operator
  template:
    metadata:
      labels:
        app: keda-operator
    spec:
      serviceAccountName: keda-operator
      containers:
      - name: keda
        image: ghcr.io/kedacore/keda:2.14.0
        imagePullPolicy: IfNotPresent
        args:
        - --zap-log-level=info  # Устанавливаем уровень логирования
        - --leader-elect=false  # Отключаем выбор лидера для тестового кластера
        env:
        - name: WATCH_NAMESPACE
          value: "keda-test"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: certs
          mountPath: /certs
          readOnly: true
      volumes:
      - name: certs
        emptyDir: {}
---
# 3. Redis: Деплоймент и Сервис
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: keda-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6-alpine
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: keda-test
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
---
# 4. Nginx: Деплоймент и Сервис
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-app
  namespace: keda-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: keda-test
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx
---
# 5. Prometheus: ConfigMap, Деплоймент и Сервис
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: keda-test
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes'
        kubernetes_sd_configs:
          - role: pod
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: keda-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
          - "--storage.tsdb.path=/prometheus/"
        ports:
          - containerPort: 9090
        volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: keda-test
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
---
# 6. KEDA: ScaledObject для автоскейлинга nginx на основе метрик из Redis
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: nginx-scaledobject
  namespace: keda-test
spec:
  scaleTargetRef:
    name: nginx-app
  pollingInterval: 5       # интервал опроса метрик (секунд)
  cooldownPeriod: 10       # период ожидания перед уменьшением реплик (секунд)
  minReplicaCount: 1
  maxReplicaCount: 10
  triggers:
  - type: redis
    metadata:
      address: "redis:6379"  # имя сервиса Redis внутри неймспейса
      listName: "queue"      # название очереди, которую будет отслеживать триггер
      listLength: "5"        # пороговое значение длины очереди для масштабирования

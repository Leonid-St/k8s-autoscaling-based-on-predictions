------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
Webapp type is pythonwebapp
Scaling metric is cpu - from cpu/rps
Workload type zigzag - from zigzag,ladder,spiky
Initial num instances is 10
starting
NAME                                            READY   UP-TO-DATE   AVAILABLE   AGE
autoscaler-pythonwebapp                         1/1     1            1           65s
envoy                                           1/1     1            1           2d5h
grafana-release                                 1/1     1            1           43m
kube-eagle                                      1/1     1            1           2d5h
prometheus-metrics-adapter-prometheus-adapter   1/1     1            1           2d5h
prometheus-release-kube-state-metrics           1/1     1            1           2d5h
prometheus-release-prometheus-pushgateway       1/1     1            1           2d5h
pythonwebapp                                    3/3     3            3           2d5h
deployment.apps "autoscaler-pythonwebapp" deleted
Name:                          gatling-pythonwebapp-cron
Namespace:                     default
Labels:                        <none>
Annotations:                   <none>
Schedule:                      0,30 * * * *
Concurrency Policy:            Forbid
Suspend:                       False
Successful Job History Limit:  3
Failed Job History Limit:      1
Starting Deadline Seconds:     <unset>
Selector:                      <unset>
Parallelism:                   <unset>
Completions:                   <unset>
Pod Template:
  Labels:  <none>
  Containers:
   gatling-envoy-job:
    Image:      leonidusername5432/gatling:latest
    Port:       <none>
    Host Port:  <none>
    Args:
      --simulation
      PythonZigZag
    Limits:
      cpu:     1800m
      memory:  10000Mi
    Requests:
      cpu:     800m
      memory:  4000Mi
    Environment:
      gatling.testendpoint:  http://envoy:8202
      JAVA_OPTS:             -Xms2G -Xmx5G
    Mounts:
      /opt/gatling/results from results-data (rw)
      /opt/gatling/user-files/simulations/PythonConstantlyGrowing.scala from gatling-job-config-vol (rw,path="PythonConstantlyGrowing.scala")
      /opt/gatling/user-files/simulations/PythonSpikyWorkload.scala from gatling-job-config-vol (rw,path="PythonSpikyWorkload.scala")
      /opt/gatling/user-files/simulations/PythonZigZag.scala from gatling-job-config-vol (rw,path="PythonZigZag.scala")
  Volumes:
   results-data:
    Type:          HostPath (bare host directory volume)
    Path:          /home/dorian/config/
    HostPathType:  DirectoryOrCreate
   gatling-job-config-vol:
    Type:            ConfigMap (a volume populated by a ConfigMap)
    Name:            gatling-job-config
    Optional:        false
  Node-Selectors:    <none>
  Tolerations:       <none>
Last Schedule Time:  Fri, 02 May 2025 17:30:00 +0000
Active Jobs:         gatling-pythonwebapp-cron-29103450
Events:
  Type    Reason            Age   From                Message
  ----    ------            ----  ----                -------
  Normal  SuccessfulDelete  48m   cronjob-controller  Deleted job gatling-pythonwebapp-cron-29103300
  Normal  SawCompletedJob   48m   cronjob-controller  Saw completed job: gatling-pythonwebapp-cron-29103390, condition: Complete
  Normal  SuccessfulCreate  43m   cronjob-controller  Created job gatling-pythonwebapp-cron-29103420
  Normal  SuccessfulDelete  18m   cronjob-controller  Deleted job gatling-pythonwebapp-cron-29103330
  Normal  SawCompletedJob   18m   cronjob-controller  Saw completed job: gatling-pythonwebapp-cron-29103420, condition: Complete
  Normal  SuccessfulCreate  13m   cronjob-controller  Created job gatling-pythonwebapp-cron-29103450
------------------------------------------------------------------------
------------------------------------------------------------------------
------------------------------------------------------------------------
Starting the workloads with no auto-scaling
Fri May  2 17:43:39 UTC 2025
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
pythonwebapp   3/3     3            3           2d5h
deployment.apps/pythonwebapp scaled
NAME           READY   UP-TO-DATE   AVAILABLE   AGE
pythonwebapp   10/10   10           10          2d5h
apiVersion: v1
kind: ConfigMap
metadata:
  name: gatling-job-config
  namespace: default
data:
  PythonZigZag.scala: |
    import io.gatling.core.Predef._
    import io.gatling.http.Predef._
    import scala.concurrent.duration._
    import util.Random

    class PythonZigZag extends Simulation {
      val feeder = Iterator.continually(Map("id" -> (Random.nextInt(2500000)),
                                            "id2"-> (Random.nextInt(2500000)) ) );
      val body: String = Random.alphanumeric.take(10000).mkString;
      val scn = scenario("Single big request")
        .feed(feeder)
        .exec(
          http("POST1")
            .post("/prime/${id}")
          .body(StringBody(session => """{ "myContent": """" + body + """" }"""))
        )
        .exec(
          http("POST2")
            .post("/hash/${id2}")
          .body(StringBody(session => """{ "myContent": """" + body + """" }"""))
        )
      val url = sys.env.getOrElse("gatling.testendpoint", "http://localhost:9100");
      val httpProtocol = http
        .baseUrl(url)
        .acceptHeader("*/*")
        .header("Keep-Alive", "150")
        .header("Content-Type", "application/json");
      setUp(
        scn.inject(
            constantUsersPerSec(80) during (2 minutes),
            constantUsersPerSec(120) during (2 minutes),
            constantUsersPerSec(160) during (2 minutes),
            constantUsersPerSec(200) during (2 minutes),
            constantUsersPerSec(150) during (2 minutes),
            constantUsersPerSec(110) during (2 minutes),
            constantUsersPerSec(155) during (2 minutes),
            constantUsersPerSec(190) during (2 minutes),
            constantUsersPerSec(235) during (2 minutes),
            constantUsersPerSec(265) during (2 minutes),
            constantUsersPerSec(205) during (2 minutes),
            constantUsersPerSec(140) during (2 minutes)
        ).protocols(httpProtocol)
      )
    }

  PythonConstantlyGrowing.scala: |
    import io.gatling.core.Predef._
    import io.gatling.http.Predef._
    import scala.concurrent.duration._
    import util.Random

    class PythonConstantlyGrowing extends Simulation {
      val feeder = Iterator.continually(Map("id" -> (Random.nextInt(2500000)),
                                            "id2"-> (Random.nextInt(2500000)) ) );
      val body: String = Random.alphanumeric.take(10000).mkString;
      val scn = scenario("Single big request")
        .feed(feeder)
        .exec(
          http("POST1")
            .post("/prime/${id}")
          .body(StringBody(session => """{ "myContent": """" + body + """" }"""))
        )

      val url = sys.env.getOrElse("gatling.testendpoint", "http://localhost:9100");

      val httpProtocol = http
        .baseUrl(url)
        .acceptHeader("*/*")
        .header("Keep-Alive", "150")
        .header("Content-Type", "application/json");

      setUp(
        scn.inject(
            constantUsersPerSec(30) during (4 minutes),
            constantUsersPerSec(90) during (4 minutes),
            constantUsersPerSec(150) during (4 minutes),
            constantUsersPerSec(210) during (4 minutes),
            constantUsersPerSec(270) during (4 minutes),
            constantUsersPerSec(330) during (4 minutes),
            rampUsersPerSec(330) to 90 during (2 minutes)
        ).protocols(httpProtocol)
      )
    }

  PythonSpikyWorkload.scala: |
    import io.gatling.core.Predef._
    import io.gatling.http.Predef._
    import scala.concurrent.duration._
    import util.Random

    class PythonSpikyWorkload extends Simulation {
      val feeder = Iterator.continually(Map("id" -> (Random.nextInt(2500000)),
                                            "id2"-> (Random.nextInt(2500000)) ) );
      val body: String = Random.alphanumeric.take(10000).mkString;
      val scn = scenario("Single big request")
        .feed(feeder)
        .exec(
          http("POST1")
            .post("/prime/${id}")
          .body(StringBody(session => """{ "myContent": """" + body + """" }"""))
        )

      val url = sys.env.getOrElse("gatling.testendpoint", "http://localhost:9100");

      val httpProtocol = http
        .baseUrl(url)
        .acceptHeader("*/*")
        .header("Keep-Alive", "150")
        .header("Content-Type", "application/json");

      setUp(
        scn.inject(
            rampUsersPerSec(20) to 50 during (180 seconds),
            rampUsersPerSec(50) to 80 during (150 seconds),
            rampUsersPerSec(80) to 350 during (90 seconds),
            rampUsersPerSec(350) to 150 during (2 minutes),
            rampUsersPerSec(150) to 20 during (4 minutes),
            rampUsersPerSec(20) to 50 during (180 seconds),
            rampUsersPerSec(50) to 80 during (150 seconds),
            rampUsersPerSec(80) to 350 during (90 seconds),
            rampUsersPerSec(350) to 150 during (2 minutes),
            rampUsersPerSec(150) to 20 during (4 minutes)
        ).protocols(httpProtocol)
      )
    }
Fri May  2 17:45:09 UTC 2025
sleeping...
